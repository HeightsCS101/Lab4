
// DO NOT EDIT THIS FILE

package cs101;

import static org.junit.jupiter.api.Assertions.assertEquals;

import java.io.ByteArrayOutputStream;
import java.io.PrintStream;

import org.junit.jupiter.api.Test;

class LoopsTest {

	@Test
	void test_a() {

		ByteArrayOutputStream outContent = new ByteArrayOutputStream();
		System.setOut(new PrintStream(outContent));

		Loops.loop_a();

		String expectedOutput = "a: 0\na: 1\na: 2\na: 3\na: 4\n";

		assertEquals(expectedOutput, outContent.toString());
	}

	@Test
	void test_b() {

		ByteArrayOutputStream outContent = new ByteArrayOutputStream();
		System.setOut(new PrintStream(outContent));

		Loops.loop_b();

		String expectedOutput = "b: 13\nb: 12\nb: 11\nb: 10\n";

		assertEquals(expectedOutput, outContent.toString());
	}

	@Test
	void test_c() {

		ByteArrayOutputStream outContent = new ByteArrayOutputStream();
		System.setOut(new PrintStream(outContent));

		Loops.loop_c();

		String expectedOutput = "c: 0\nc: 1\nc: 2\nc: 3\nc: 4\n";

		assertEquals(expectedOutput, outContent.toString());
	}

	@Test
	void test_d() {

		ByteArrayOutputStream outContent = new ByteArrayOutputStream();
		System.setOut(new PrintStream(outContent));

		Loops.loop_d();

		String expectedOutput = "d: 3\nd: 5\nd: 7\nd: 9\nd: 11\n";

		assertEquals(expectedOutput, outContent.toString());
	}

	@Test
	void test_e() {

		ByteArrayOutputStream outContent = new ByteArrayOutputStream();
		System.setOut(new PrintStream(outContent));

		Loops.loop_e();

		String expectedOutput = "e: 2\ne: 3\ne: 4\n";

		assertEquals(expectedOutput, outContent.toString());
	}

	@Test
	void test_f() {

		ByteArrayOutputStream outContent = new ByteArrayOutputStream();
		System.setOut(new PrintStream(outContent));

		Loops.loop_f();

		String expectedOutput = "f: 10\nf: 9\nf: 8\nf: 7\nf: 6\nf: 5\n";

		assertEquals(expectedOutput, outContent.toString());
	}

	@Test
	void test_g() {

		ByteArrayOutputStream outContent = new ByteArrayOutputStream();
		System.setOut(new PrintStream(outContent));

		Loops.loop_g();

		String expectedOutput = "g: 0\n" + "g: 1\n" + "g: 2\n" + "g: 3\n" + "g: 4\n" + "g: 5\n" + "g: 6\n";

		assertEquals(expectedOutput, outContent.toString());
	}

	@Test
	void test_h() {

		ByteArrayOutputStream outContent = new ByteArrayOutputStream();
		System.setOut(new PrintStream(outContent));

		Loops.loop_h();

		String expectedOutput = "h1: 0\n" + "h2: 1\n" + "h2: 2\n" + "h1: 1\n" + "h2: 1\n" + "h2: 2\n" + "h1: 2\n"
				+ "h2: 1\n" + "h2: 2\n" + "h1: 3\n" + "h2: 1\n" + "h2: 2\n";

		assertEquals(expectedOutput, outContent.toString());
	}

	@Test
	void test_i() {

		ByteArrayOutputStream outContent = new ByteArrayOutputStream();
		System.setOut(new PrintStream(outContent));

		Loops.loop_i();

		String expectedOutput = "i1: 0\n" + "i2: 5\n" + "i2: 4\n" + "i2: 3\n" + "i2: 2\n" + "i2: 1\n" + "i1: 1\n"
				+ "i2: 5\n" + "i2: 4\n" + "i2: 3\n" + "i2: 2\n" + "i2: 1\n";

		assertEquals(expectedOutput, outContent.toString());
	}

	@Test
	void test_j() {

		ByteArrayOutputStream outContent = new ByteArrayOutputStream();
		System.setOut(new PrintStream(outContent));

		Loops.loop_j();

		String expectedOutput = "j1: 0\n" + "j1: 0\n" + "j1: 0\n" + "j1: 1\n" + "j1: 1\n" + "j1: 1\n" + "j1: 2\n"
				+ "j1: 2\n" + "j1: 2\n" + "j1: 3\n" + "j1: 3\n" + "j1: 3\n" + "j1: 4\n" + "j1: 4\n" + "j1: 4\n";

		assertEquals(expectedOutput, outContent.toString());
	}

	@Test
	void test_k() {

		ByteArrayOutputStream outContent = new ByteArrayOutputStream();
		System.setOut(new PrintStream(outContent));

		Loops.loop_k();

		String expectedOutput = "k1: 10\n" + "k2: 0\n" + "k2: 4\n" + "k2: 8\n" + "k2: 12\n" + "k1: 9\n" + "k2: 0\n"
				+ "k2: 4\n" + "k2: 8\n" + "k2: 12\n" + "k1: 8\n" + "k2: 0\n" + "k2: 4\n" + "k2: 8\n" + "k2: 12\n"
				+ "k1: 7\n" + "k2: 0\n" + "k2: 4\n" + "k2: 8\n" + "k2: 12\n" + "k1: 6\n" + "k2: 0\n" + "k2: 4\n"
				+ "k2: 8\n" + "k2: 12\n" + "k1: 5\n" + "k2: 0\n" + "k2: 4\n" + "k2: 8\n" + "k2: 12\n";

		assertEquals(expectedOutput, outContent.toString());
	}

}
